#include <iostream>
#include <vector>

using namespace std;

double determinant(vector<vector<double>> matrix) {
    if (matrix.size() != matrix[0].size()) {
        throw runtime_error("Matrix is not square");
    }
    int n = matrix.size();
    if (n == 1) {
        return matrix[0][0];
    }
    
    double det = 0;
    for (int i = 0; i < n; i++) {
        vector<vector<double>> submatrix;
        for (int j = 1; j < n; j++) {
            vector<double> row;
            for (int k = 0; k < n; k++) {
                if (k != i) {
                    row.push_back(matrix[j][k]);
                }
            }
            submatrix.push_back(row);
        }
        det += (i % 2 == 0 ? 1 : -1) * matrix[0][i] * determinant(submatrix);
    }
    
    return det;
}

vector<double> solveEquation(vector<vector<double>> coefficients, vector<double> constants) {
    double detA = determinant(coefficients);
    int n = coefficients.size();
    
    vector<double> solutions;
    for (int i = 0; i < n; i++) {
        vector<vector<double>> matrix = coefficients;
        for (int j = 0; j < n; j++) {
            matrix[j][i] = constants[j];
        }
        double detX = determinant(matrix);
        solutions.push_back(detX / detA);
    }
    
    return solutions;
}

int main() {
    vector<vector<double>> coefficients = {{2, -1}, {1, 4}};
    vector<double> constants = {5, 8};
    
    vector<double> solutions = solveEquation(coefficients, constants);
    cout << "x = " << solutions[0] << ", y = " << solutions[1] << endl;
    
    return 0;
}
