#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <limits>

using namespace std;

// Метод Ньютона

// Функция, для которой ищем корень
double f(double x) {
  // Пример: x^3 - 2x - 5
  return pow(x, 3) - 2 * x - 5;
}

// Производная функции f(x)
double df(double x) {
  // Пример: 3x^2 - 2
  return 3 * pow(x, 2) - 2;
}


double newtonMethod(double x0, double eps, int maxIter) {
    double x = x0;
    int iter = 0;
  
    if (abs(df(x0)) < numeric_limits<double>::epsilon()) {
         cout << "Производная близка к нулю. Метод Ньютона не может сходиться" << endl;
         return numeric_limits<double>::quiet_NaN();
    }
    
    do {
        double x_prev = x;
        x = x - f(x) / df(x);
        iter++;
        if (iter > maxIter) {
            cout << "Превышено максимальное количество итераций." << endl;
            return numeric_limits<double>::quiet_NaN();
        }
    } while (fabs(x - x_prev) > eps);

    return x;
}


// Интерполяционный многочлен Лагранжа
double lagrangeInterpolation(const vector<double>& x, const vector<double>& y, double t) {
    int n = x.size();
    double result = 0.0;

    for (int i = 0; i < n; ++i) {
        double term = y[i];
        for (int j = 0; j < n; ++j) {
           if (i != j) {
                term = term * (t - x[j]) / (x[i] - x[j]);
            }
        }
        result += term;
    }
    return result;
}


int main() {
    // ---------------- Метод Ньютона ----------------
    cout << "----------- Метод Ньютона -----------" << endl;
    double x0, epsNewton;
    int maxIterNewton;
    cout << "Введите начальное приближение (x0): ";
    cin >> x0;
    cout << "Введите точность (eps) для Ньютона: ";
    cin >> epsNewton;
    cout << "Введите максимальное количество итераций для Ньютона: ";
    cin >> maxIterNewton;

    double root = newtonMethod(x0, epsNewton, maxIterNewton);
    if (!isnan(root)) {
        cout << "Найденный корень (Ньютон): " << fixed << setprecision(10) << root << endl;
        cout << "Значение функции в корне (Ньютон): " << fixed << setprecision(10) << f(root) << endl;
    }

    // Интерполяция Лагранжа
     cout << endl << "Интерполяция Лагранжа" << endl;
    int n;
    cout << "Введите количество точек: ";
    cin >> n;
    vector<double> x(n), y(n);

    cout << "Введите координаты X и Y для каждой точки:" << endl;
    for (int i = 0; i < n; ++i) {
        cout << "x[" << i << "] = ";
        cin >> x[i];
        cout << "y[" << i << "] = ";
        cin >> y[i];
    }

    double t;
    cout << "Введите значение t, для которого хотите вычислить интерполяцию: ";
    cin >> t;
    double lagrangeValue = lagrangeInterpolation(x, y, t);
    cout << "Значение интерполяционного многочлена Лагранжа в точке " << t << " равно: " << fixed << setprecision(10) << lagrangeValue << endl;


  return 0;
}
