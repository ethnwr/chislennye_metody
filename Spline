#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
#include <algorithm>

using namespace std;

// Структура для хранения коэффициентов кубического сплайна на интервале [x[i], x[i+1]]
struct Spline {
    double a, b, c, d; // y_i, b_i, c_i, d_i
};


// Функция для вычисления прогоночных коэффициентов
void calculateCoefficients(const vector<double>& x, const vector<double>& y, int n, vector<double>& a, vector<double>& b, vector<double>& c, vector<double>& d, vector<double>& h, vector<double>& alpha, vector<double>& l, vector<double>& mu, vector<double>& z) {
    
    // Вычисление h_i
    for (int i = 0; i < n - 1; ++i) {
        h[i] = x[i + 1] - x[i];
    }

    // Вычисление alpha_i
    for (int i = 1; i < n - 1; ++i) {
        alpha[i] = (3.0 / h[i]) * (y[i + 1] - y[i]) - (3.0 / h[i - 1]) * (y[i] - y[i - 1]);
    }
    
    // Прямой проход
    l[0] = 1.0;
    mu[0] = 0.0;
    z[0] = 0.0;
    
    for (int i = 1; i < n - 1; ++i) {
        l[i] = 2.0 * (x[i + 1] - x[i - 1]) - h[i - 1] * mu[i - 1];
        mu[i] = h[i] / l[i];
        z[i] = (alpha[i] - h[i - 1] * z[i - 1]) / l[i];
    }
    
    l[n - 1] = 1.0;
    z[n - 1] = 0.0;
    
    // Обратный проход
    d[n - 1] = 0.0;
    for (int i = n - 2; i >= 0; --i) {
        d[i] = z[i] - mu[i] * d[i + 1];
    }
   
    for (int i = 0; i < n - 1; i++) {
      a[i] = y[i];
      b[i] = (y[i+1] - y[i]) / h[i] - h[i] * (2 * d[i] + d[i+1]) / 3;
      c[i] = d[i];
      d[i] = (d[i+1] - d[i]) / (3 * h[i]);
      
    }
}

// Функция для интерполяции сплайном в точке t
double splineInterpolation(const vector<double>& x, const vector<Spline>& splines, double t) {
    int n = x.size() - 1;
    if (t < x[0] || t > x[n]) {
        cout << "Error: t out of range." << endl;
        return numeric_limits<double>::quiet_NaN();
    }
     
    int i = 0;
    for (; i < n; ++i) {
        if (t <= x[i + 1]) {
            break;
        }
    }
   
    double dx = t - x[i];
    return splines[i].a + splines[i].b * dx + splines[i].c * pow(dx, 2) + splines[i].d * pow(dx, 3);
}

int main() {
    int n;

    cout << "Введите количество точек: ";
    cin >> n;

    vector<double> x(n);
    vector<double> y(n);

    cout << "Введите координаты x и y для каждой точки:" << endl;
    for (int i = 0; i < n; ++i) {
        cout << "x[" << i << "] = ";
        cin >> x[i];
        cout << "y[" << i << "] = ";
        cin >> y[i];
    }

   // Проверка, чтобы точки x были отсортированы
   if (!is_sorted(x.begin(), x.end())) {
      cout << "Error: x-coordinates must be in increasing order." << endl;
        return 1;
    }

    // Вычисление прогоночных коэффициентов
    vector<double> a(n-1), b(n-1), c(n), d_coeffs(n), h(n-1), alpha(n);
    vector<double> l(n), mu(n), z(n);
    calculateCoefficients(x, y, n, a, b, c, d_coeffs, h, alpha, l, mu, z);

    vector<Spline> splines(n - 1);

    for (int i = 0; i < n - 1; ++i) {
      splines[i].a = a[i];
      splines[i].b = b[i];
      splines[i].c = c[i];
      splines[i].d = d_coeffs[i];
    }

    double t;
    cout << "Введите значение t, для которого хотите вычислить интерполяцию: ";
    cin >> t;

    double splineValue = splineInterpolation(x, splines, t);

    if (!isnan(splineValue)) {
         cout << "Значение сплайн-интерполяции в точке " << t << " равно: " << fixed << setprecision(10) << splineValue << endl;
    }

    return 0;
}
