#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>

using namespace std;

// Функция для вывода матрицы
void printMatrix(const vector<vector<double>>& matrix) {
  int rows = matrix.size();
  if (rows == 0) return;
  int cols = matrix[0].size();

  for (int i = 0; i < rows; ++i) {
    for (int j = 0; j < cols; ++j) {
      cout << setw(10) << fixed << setprecision(4) << matrix[i][j] << " ";
    }
    cout << endl;
  }
  cout << endl;
}

// Метод гаусса
vector<double> gauss(vector<vector<double>> matrix) {
  int rows = matrix.size();
  if (rows == 0) return {}; // Пустая матрица

  int cols = matrix[0].size();
  if (cols <= rows) return {}; // Некорректная матрица (слишком мало столбцов)

  
  for (int i = 0; i < rows; ++i) {
    int maxRow = i;
    for (int k = i + 1; k < rows; ++k) {
      if (abs(matrix[k][i]) > abs(matrix[maxRow][i])) {
        maxRow = k;
      }
    }

    if (maxRow != i) {
      swap(matrix[i], matrix[maxRow]);
    }

    if (abs(matrix[i][i]) < 1e-10) {
        cout << "Матрица вырождена или близка к вырожденной. Решение может быть некорректным." << endl;
        return {};
    }

    for (int k = i + 1; k < rows; ++k) {
      double factor = matrix[k][i] / matrix[i][i];
      for (int j = i; j < cols; ++j) {
        matrix[k][j] -= factor * matrix[i][j];
      }
    }
  }
  vector<double> result(rows);
  for (int i = rows - 1; i >= 0; --i) {
    result[i] = matrix[i][cols - 1];
    for (int j = i + 1; j < cols - 1; ++j) {
      result[i] -= matrix[i][j] * result[j];
    }
    result[i] /= matrix[i][i];
  }

  return result;
}

int main() {
  vector<vector<double>> matrix = {
    {2, 1, -1, 8},
    {-3, -1, 2, -11},
    {-2, 1, 2, -3}
  };

  cout << "Исходная расширенная матрица:" << endl;
  printMatrix(matrix);

  vector<double> solution = gauss(matrix);

  if (solution.empty()) {
      cout << "Решение не найдено (матрица вырождена)" << endl;
  } else {
      cout << "Решение системы уравнений:" << endl;
      for (int i = 0; i < solution.size(); ++i) {
          cout << "x" << i + 1 << " = " << fixed << setprecision(4) << solution[i] << endl;
      }
  }
  return 0;
}
